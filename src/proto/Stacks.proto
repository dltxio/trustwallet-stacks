syntax = "proto3";

package TW.Stacks.Proto;
option java_package = "wallet.core.jni.proto";

message MessageSignature {
    bytes data = 1;
}

message SingleSigSpendingCondition {
    uint32 hashMode = 1; // enum
    bytes signer = 2;
    uint64 nonce = 3;
    uint64 fee = 4;
    uint32 keyEncoding = 5; // enum
    MessageSignature signature = 6;
}

message SpendingCondition {
    oneof spending_oneof {
        SingleSigSpendingCondition single = 1;
    }
}

message Authorization {
    uint32 authType = 1; // enum equal to AuthType.Standard
    SpendingCondition spendingCondition = 2;
}

message Address {
    uint32 version = 1;
    bytes hash160 = 2;
}

message LengthPrefixedString {
    string content = 1;
    uint32 lengthPrefixBytes = 2;
    uint32 maxLengthBytes = 3;
}

message StandardPrincipalCV {
    Address address = 1;
}

message ContractPrincipalCV {
    Address address = 1;
    LengthPrefixedString contractName = 2;
}

message PrincipalCV {
    oneof cv_oneof {
        StandardPrincipalCV standard = 1;
        ContractPrincipalCV contract = 2;
    }
}

message MemoString {
    string content = 1;
}

message TokenTransferPayload {
    uint32 payloadType = 1; // enum equal to PayloadType.TokenTransfer
    PrincipalCV recipient = 2;
    int64 amount = 3;
    MemoString memo = 4;
}

message Payload {
    oneof payload_oneof {
        TokenTransferPayload transfer = 1;
    }
}

message StacksTransaction {
    uint32 version = 1; // enum
    uint32 chainId = 2; // enum
    Authorization auth = 3;
    uint32 anchorMode = 4; // enum
    Payload payload = 5;
}

message TokenTransferOptions {
    string recipient = 1;
    int64 amount = 2;
    int64 fee = 3;
    int64 nonce = 4;
    uint32 anchorMode = 5; // enum
    string memo = 6;
}

// Input data necessary to create a signed transaction.
message SigningInput {
    oneof signer_oneof {
        bytes senderKey = 1;
    }
    oneof transaction_oneof {
        TokenTransferOptions tokenTransfer = 10;
    }
}

// Transaction signing output.
message SigningOutput {
    // Signed and encoded transaction bytes.
    bytes encoded = 1;
}

